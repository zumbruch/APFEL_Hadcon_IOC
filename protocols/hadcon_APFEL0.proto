Terminator  = LF;
LockTimeout  = 5000;
WriteTimeout  = 100;
ReplyTimeout  = 200;
ReadTimeout   = 100;
PollPeriod    = 1000;
ExtraInput    = Ignore;

## https://wiki.gsi.de/foswiki/Epics/HadCon2MultipurposeControlsProtocolCmndApfelV0
## 
##|task       |command                                                                      |individual arguments     |common address    |comment   |
##|           |                                                                             |                         |arguments         |          |
##|=================================================================================================================================================|
##|=================================================================================================================================================|
##|           |APFEL 9 <DAC value> <dac> <chipId> <pinSetId> <sideSelectId> <port> [<quiet>]|      <DAC value>        |                  |          |
##|setDac     |                                                                             |      [ 0 ... 0x3FF ]    |    <chipId>      |writes DAC|
##|           |answer (if not quiet): → readDac                                           	|           <DAC>         | [ 0 ... 7, 8 ... |channel   |
##|           |                                                                             |         [ 1 ... 4 ]     |     FE, FF]      |          |
##|           |APFEL A <dac> <chipId> <pinSetId> <sideSelectId> <port>                		|                         |0xFF: generic call|          |
##|           |answers:                                                                     |            <DAC>        | to all available |reads     |
##|readDac    |RECV APFEL dac <port> <pinSetId> <sideSelectId> <chipId> <dac> <DAC value>   |          [ 1 ... 4 ]    |    chip Ids      |single DAC|
##|           |ERRA APFEL dac <port> <pinSetId> <sideSelectId> <chipId> <dac> <DAC value> - |                         |   <pinSetId>     |channel   |
##|           |read validity check failed, raw value:                                       |                         |    [ 1, 2 ]      |          |
##|           |APFEL A 0  <chipId> <pinSetId> <sideSelectId> <port>                  		|                         | <sideSelectId>   |*Not Yet  |
##|           |answers:                                                                     |                         |     [ 0,1 ]      |Available*|
##|readAllDacs|RECV APFEL dac <port> <pinSetId> <sideSelectId> <chipId> 0 <DAC value1> <DAC |                         |     <port>       |reads all |
##|           |value2> <DAC value3> <DAC value4>                                            |                         |  A,C,F <quiet>   |DAC       |
##|           |ERRA APFEL dac <port> <pinSetId> <sideSelectId> <chipId> <dac> <DAC value> - |                         |      [0,1]       |channels  |
##|           |read validity check failed, raw value:                                       |                         |                  |of an ch  |
##|=================================================================================================================================================|
##|autocalib  |APFEL B <chipId> <pinSetId> <sideSelectId> <port>                       		|                         |auto calibration  |
##|=================================================================================================================================================|
##|TP single  |APFEL C <pulse height Pattern> <chipId> <pinSetId> <sideSelectId> <port>		| <pulse height Pattern>  |test pulse        |
##|           |                                                                             |       [ 2...3FF ]       |                  |
##|           |                                                                             | <pulse height Pattern>  |                  |
##|TP reset   |APFEL D <pulse height> <channel> <chipId> <pinSetId> <sideSelectId> <port>	|      [ 1 ... F ]        |test pulse inkl.  |
##|           |                                                                             |        <channel>        |reset             |
##|           |                                                                             |        [ 1, 2 ]         |                  |
##|           |                                                                             |                         |                  |<on/off>  |
##|           |                                                                             |                         |                  |enables/  |
##|           |                                                                             |                         |                  |disables  |
##|           |                                                                             |        <on/off>         |                  |<pin> on  |
##|           |                                                                             |        [ 0,1 ]          |                  |<port> to |
##|           |                                                                             |         <port>          |                  |trigger   |
##|           |                                                                             |   [ A,B,C,D,E,F,G ]     |                  |right in  |
##|TP trigger |APFEL 11 <on/off> <port> <pin> <trigger position>                      		|         <pin>           |                 |the moment|
##|           |                                                                             |        [1...8]          |                  |after a   |
##|           |                                                                             |<trigger after set (1) or|                  |test pulse|
##|           |                                                                             |    after reset (2)>     |                  |set or    |
##|           |                                                                             |          [1,2]          |                  |reset     |
##|           |                                                                             |                         |                  |command   |
##|           |                                                                             |                         |                  |sequence  |
##|           |                                                                             |                         |                  |is sent   |
##|=================================================================================================================================================|
##|setAmpl    |APFEL E <channel> <chipId> <pinSetId> <sideSelectId> <port>            		|           <channel>     |setAmplification  |
##|           |                                                                             |           [ 1, 2 ]      |to high           |
##|resetAmpl  |APFEL F <channel> <chipId> <pinSetId> <sideSelectId> <port>            		|           <channel>     |resetAmplification|
##|           |                                                                             |           [ 1, 2 ]      |to low            |
##|=================================================================================================================================================|
##|           |                                                                             |                         |check  <number of |
##|           |                                                                             |        <all flag>       |chip Ids> channels|
##|listId     |APFEL 10 <all> <NChipIds> <pinSetId> <sideSelectId> <port>             		|  [ 1...FF ]  <number of |and list depending|
##|           |                                                                             |        chip Ids>        |on the  <all flag>|
##|           |                                                                             |        [ 1...FF ]       |all or only       |
##|           |                                                                             |                         |positive results  |
##|           |                                                                             |       <all flag>        |check  <number of |
##|           |                                                                             | [ 1...FF ]  <number of  |chip Ids> channels|
##|listId++   |APFEL 20 <all> <NChipIds> <minChipId> <pinSetId> <sideSelectId> <port>		|       chip Ids>         |and list depending|
##|           |                                                                             |[ 1...FF ]  <min Chip Id>|on the  <all flag>|
##|           |                                                                             |                         |all or only       |
##|           |                                                                             |       [ 1...FF ]        |positive results  |
##===================================================================================================================================================

key = "APFEL";
recvKey = "%*{\nRECV|RECV} "$key" ";

#generic addresses
# requires calc(out) record
#   A: chipId
#   B: pinSet
#   C: sideSelection
#   D: port
#   E: dac
genSendAddress = "%(A)x %(B)x %(C)x %(D)#{A=1|C=3|F=6}";
genRecvAddress = "port:%(D)#{A=1|C=3|F=6} pinSet:%(B)x side:%(C)x chip:%(A)x";
genRecvAddress = "port:%(D)#{A=1|C=3|F=6} pinSet:%(B)x side:%(C)x chip:%(A)x";

dummy {
	out "";
}

## write dac

setDac {
	# Example of command field(OUT, "@$(protocolFile) setDac($(DAC),$(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="9";
	dummy;
	out $key" "$cc" %x \$1 \$2 \$3 \$4 \$5";	
}

## read dac
requestDac {
	# Example of command field(INP, "@$(protocolFile) requestDac($(DAC),$(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="A";
	dummy;
	out $key" "$cc" \$1 \$2 \$3 \$4 \$5";	 
}


receiveDac {
	# Example of command field(INP, "@$(protocolFile) receiveDac($(DAC),$(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 

	ic="dac";
#	in $recvKey" "$ic" \$5 \$3 \$4 \$2 dac:\$1 %x";	
	in "RECV APFEL dac \$5 \$3 \$4 \$2 dac:\$1 %x";	
}

readDac {
	# Example of command field(INP, "@$(protocolFile) readDac($(DAC),$(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 
	ReplyTimeout  = 400;
	ReadTimeout   = 500;

    cc="A";
    ic="dac";
	requestDac;
	receiveDac;

	@mismatch{
     in "ERRA -1 \"APFEL dac \$5 \$3 \$4 \$2 dac:\$1\_-\_read validity check failed, raw value:%x\""
	}
}


autoCalibration {
	# Example of command field(OUT, "@$(protocolFile) autoCalibration($(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="B";
	dummy;
	out $key" "$cc" \$1 \$2 \$3 \$4";	
}

testPulse {
	# Example of command field(OUT, "@$(protocolFile) testPulse($(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="C";
	dummy;
	out $key" "$cc" %x \$1 \$2 \$3 \$4";	
}


testPulseSeq {
	# Example of command field(OUT, "@$(protocolFile) testPulseSeq($(channel),$(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="D";
	dummy;
	out $key" "$cc" %x \$1 \$2 \$3 \$4 \$5";	
}


setAmplification {
	# Example of command field(OUT, "@$(protocolFile) setAmplification($(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="E";
	dummy;
	out $key" "$cc" %x \$1 \$2 \$3 \$4";	
}


resetAmplification {
	# Example of command field(OUT, "@$(protocolFile) resetAmplification($(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="F";
	dummy;
	out $key" "$cc" %x \$1 \$2 \$3 \$4";	
}

unsetSetStreamDebug {
	exec "var streamDebug 0";
	wait 30000;
	exec "var streamDebug 1";
}

listId {
	# Example of command field(OUT, "@$(protocolFile) listId($(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="20";
	dummy;
	out $key" "$cc" 1 %x 1 \$1 \$2 \$3";	
    unsetSetStreamDebug;
}

listIdSingle {
	# Example of command field(OUT, "@$(protocolFile) listIdSingle($(pinSet),$(sideSelection),$(port)) $(device)") 

	cc="20";
	dummy;
	out $key" "$cc" 1 1 %x \$1 \$2 \$3";
	unsetSetStreamDebug;
}

listIdRange {
	# Example of command field(OUT, "@$(protocolFile) listIdRange($(pinSet),$(sideSelection),$(port),$(number)) $(device)") 

	cc="20";
	dummy;
	out $key" "$cc" 1 \$4 %x \$1 \$2 \$3";
	unsetSetStreamDebug;
}

listIdRange_co {
	# expecting a calcout record calling this protocol
	# A: minChipId
	# B: nChips
	# C: stepSize
	# Example of command field(OUT, "@$(protocolFile) listIdRange($(pinSet),$(sideSelection),$(port))) $(device)") 

	cc="20";
	dummy;
	out $key" "$cc" 1 %(B)x %(A)x \$1 \$2 \$3";
	unsetSetStreamDebug;
}

listIdStatus_intr {
	# Example of command field(INP, "@$(protocolFile) listIdStatus($(chipId),$(pinSet),$(sideSelection),$(port)) $(device)") 
	PollPeriod    = 30000;
	ic="list";
#	in $recvKey" "$ic" \$4 \$2 \$3 \$1 %{no|yes}";	
	in "RECV APFEL list \$4 \$2 \$3 \$1 %{no|yes}";	
}


## hadcon

setTrigger {
	# Example of command field(OUT, "@$(protocolFile) setTrigger $(device)") 
	# requires calc(out) record
    # A: status
    # B: pin
    # C: port
    # D: position
    
	cc="11";
	dummy;
	out $key" "$cc" %(A){OFF|ON} %(C)#{A=1|B=2|C=3|D=4|E=5|F=6|G=7} %(B)x %(D)x";  	
}

requestTrigger {
	# Example of command field(OUT, "@$(protocolFile) requestTrigger $(device)") 
	# requires calc(out) record

	Terminator = LF;
	cc="11";
	dummy;
	out $key" 11";	
}


readTrigger_intr {
	# Example of command field(OUT, "@$(protocolFile) readTrigger_intr $(device)") 
	# requires calc(out) record
    # A: status
    # B: pin
    # C: port
    # D: position

	in "RECV APFEL trigger %(A){OFF|ON} %(C)#{A=1|B=2|C=3|D=4|E=5|F=6|G=7} %(B)x %(D)x";
}

readTrigger {
	# Example of command field(OUT, "@$(protocolFile) readTrigger $(device)") 
	# requires calc(out) record

	requestTrigger;
	readTrigger_intr;
}

################################################################################
## generic

genSetDac {
	# Example of command field(OUT, "@$(protocolFile) genSetDac $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
	#   E: dac

	cc="9";
	dummy;
	out $key" "$cc" %x %(E)x "$genSendAddress;	
}

genReadDac {
	# Example of command field(INP, "@$(protocolFile) genReadDac $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
	#   E: dac

	genRequestDac;
	genReceiveDac;
}

genRequestDac {
	# Example of command field(OUT, "@$(protocolFile) genRequestDac $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
	#   E: dac

	cc="A";
	dummy; 
	out $key" "$cc" %(E)x "$genSendAddress;	 
}

genReceiveDac {
	# Example of command field(OUT, "@$(protocolFile) genReceiveDac $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
	#   E: dac

	ic="dac";
	in "RECV APFEL "$ic" "$genRecvAddress" dac:%(E)x %x";	
}

genAutoCalibration {
	# Example of command field(OUT, "@$(protocolFile) genAutoCalibration $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port

	cc="B";
	dummy;
	out $key" "$cc" "$genSendAddress;	
}

genTestPulse {
	# Example of command field(OUT, "@$(protocolFile) genTestPulse $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
    
	cc="C";
	dummy;
	out $key" "$cc" %x "$genSendAddress;	
}

genTestPulseSeq {
	# Example of command field(OUT, "@$(protocolFile) genTestPulseSeq $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
	#   E: channel
	#   F: height
    
	cc="D";
	dummy;
	out $key" "$cc" %(F)x %(E)x "$genSendAddress;	
}
genSetAmplification {
	# Example of command field(OUT, "@$(protocolFile) genSetAmplification $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
    
	cc="E";
	dummy;
	out $key" "$cc" %x "$genSendAddress;	
}

genResetAmplification {
	# Example of command field(OUT, "@$(protocolFile) genResetAmplification $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
    
	cc="F";
	dummy;
	out $key" "$cc" %x "$genSendAddress;	
}

genListIdStatus_intr {
	# Example of command field(OUT, "@$(protocolFile) ListIdStatus_intr $(device)") 
	# requires calc(out) record
	#   A: chipId
	#   B: pinSet
	#   C: sideSelection
	#   D: port
    
	ic="list";
	in "RECV APFEL "$cc" "$genRecvAddress" %{no|yes}";	
                   
}
